# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - back-end
    exclude:
      - back-end/README.md

variables:
  projectDirectory: "$(System.DefaultWorkingDirectory)/back-end"
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: "a5dfc76c-c47a-4b8b-81d7-82e241224502"
  # Agent VM image name
  vmImageName: "ubuntu-latest"

jobs:
  # Build the python packages in a virtual env
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: UseDotNet@2
        displayName: "SDK Install"
        inputs:
          version: "3.1.x"
          performMultiLevelLookup: true

      - script: |
          dotnet restore
          dotnet build --configuration Release        
        workingDirectory: "$(projectDirectory)"
        displayName: "Restore"

      - task: DotNetCoreCLI@2        
        displayName: "Tests"
        inputs:
          command: "test"
          arguments: "--configuration Release"
          projects: "**/*.Test.csproj"
          testRunTitle: "Unit Test"
          workingDirectory: "$(projectDirectory)"

      - task: DotNetCoreCLI@2
        displayName: "Publish"        
        inputs:
          command: publish
          arguments: "--configuration Release --output $(projectDirectory)/publish_output"
          projects: "**/*.Functions.csproj"
          publishWebProjects: false
          modifyOutputPath: false
          zipAfterPublish: false
          workingDirectory: "$(projectDirectory)"

      - task: ArchiveFiles@2
        displayName: "Archive files"
        inputs:
          rootFolderOrFile: "$(projectDirectory)/publish_output"
          includeRootFolder: false
          archiveFile: "$(Build.ArtifactStagingDirectory)/build$(Build.BuildId)-functions.zip"

      - task: CopyFiles@2
        inputs:
          SourceFolder: "$(projectDirectory)/deployment"
          TargetFolder: "$(Build.ArtifactStagingDirectory)/deployment"

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          artifactName: "drop"      
