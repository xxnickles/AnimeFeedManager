@using AnimeFeedManager.WebApp.State
@using AnimeFeedManager.WebApp.Services
@using System.Net
@using AnimeFeedManager.Core.ConstrainedTypes
@using System.Collections.Immutable
@inherits LayoutComponentBase
@implements IDisposable
@inject ApplicationState State
@inject IUserService UserService
@inject ISubscriberService SubscriberService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3">Anime Feed Manager</MudText>
        <MudSpacer/>
        <AuthorizeView>
            <Authorized>
                <AuthorizedUserPanel User="@State.Value.User"></AuthorizedUserPanel>
            </Authorized>
            <NotAuthorized>
                <LoginProviders></LoginProviders>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{

    [CascadingParameter]
    private Task<AuthenticationState?>? AuthenticationState { get; set; }

    [CascadingParameter]
    private Error? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        State.OnStateChange += StateHasChanged;
        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var state = await AuthenticationState;
        ArgumentNullException.ThrowIfNull(state);
        if (state is null || (!state.User?.Identity?.IsAuthenticated ?? true))
        {
            await CompleteDefaultProfile(new AnonymousUser());
        }
        else
        {
            var userId = state?.User?.Claims.First(c => c.Type.Contains("nameidentifier")).Value ?? string.Empty;
            var name = state?.User?.Identity?.Name ?? string.Empty;
            var email = await GetUserEmail(userId, name);
            await email.Value.Match(
                CompleteProfile,
                () => CompleteDefaultProfile(new AuthenticatedUser()));
        }
    }

    private async Task<Email> GetUserEmail(string userId, string username)
    {
        try
        {
            var userEmail = await UserService.GetEmail(userId);

            // Email is in the systems
            if (!string.IsNullOrEmpty(userEmail))
                return Email.FromString(userEmail);
            
            // UserName is email
            if (!Email.IsEmail(username)) return await CompleteUserProfile(userId);
            
            // Save a new email
            await SaveUser(userId, username);
            return new Email(username);
        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == HttpStatusCode.NotFound)
        {
            return await CompleteUserProfile(userId);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("User Fetching", ex);
            return Email.FromString(string.Empty);
        }
    }

    private async Task<Email> CompleteUserProfile(string userId)
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var dialog = DialogService.Show<UserEmailDialog>("Complete Profile", options);
        var result = await dialog.Result;

        if (result.Cancelled || result.Data == null) return Email.FromString(string.Empty);
        var email = result.Data.ToString() ?? string.Empty;
        await SaveUser(userId, email);
        return Email.FromString(email);
    }

    private async Task SaveUser(string userId, string email)
    {
        try
        {
            await UserService.MergeUser(new UserDto(userId, email));
            Snackbar.Add("Email has been stored", Severity.Info);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("User Fetching", ex);
        }
    }

    private Task CompleteDefaultProfile(User user)
    {
        State.SetUser(user);
        State.SetSubscriptions(ImmutableList<string>.Empty);
        State.SetInterested(ImmutableList<string>.Empty);

        return Task.CompletedTask;
    }

    private async Task CompleteProfile(string email)
    {
        try
        {
            var subscriptions = await SubscriberService.GetSubscriptions(email);
            State.SetSubscriptions(subscriptions);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            State.SetSubscriptions(ImmutableList<string>.Empty);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("Getting Subscriptions", ex);
        }

        try
        {
            var interested = await SubscriberService.GetInterested(email);
            State.SetInterested(interested);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            State.SetSubscriptions(ImmutableList<string>.Empty);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("Getting Interested Series", ex);
        }

        State.SetUser(new ApplicationUser(email));
        Snackbar.Add("Profile has been completed", Severity.Info);
    }

    public void Dispose()
    {
        State.OnStateChange -= StateHasChanged;
    }

}