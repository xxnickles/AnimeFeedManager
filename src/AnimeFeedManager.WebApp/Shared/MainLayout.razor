@using AnimeFeedManager.WebApp.State
@using AnimeFeedManager.WebApp.Services
@using AnimeFeedManager.WebApp.Services.Notifications
@using Toolbelt.Blazor.PWA.Updater
@using ApplicationException = AnimeFeedManager.WebApp.State.AppException
@inherits LayoutComponentBase
@implements IDisposable
@inject ApplicationState State
@inject UserSideEffects UserSideEffects
@inject SeasonSideEffects SeasonSideEffects
@inject IDialogService DialogService
@inject IRealtimeNotificationService RealtimeNotificationService
@inject ISnackbar Snackbar
@inject Metadata AppMetadata


<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider Style="white-space:pre-wrap;"/>
<BackendNotifications/>
<PWAUpdater/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudBreakpointProvider>
            <MudHidden Breakpoint="Breakpoint.Xs">
                <MudLink Color="Color.Primary" Underline="Underline.Hover" Typo="Typo.h5" Class="ml-3" Href="/">Anime Feed Manager</MudLink>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                <MudLink Href="/" Underline="Underline.None">
                    <MudAvatar Size="Size.Medium" Color="Color.Secondary" Alt="Anime Feed Manager" Style="font-size: 0.75rem">AMF</MudAvatar>
                </MudLink>
            </MudHidden>
        </MudBreakpointProvider>
        <MudSpacer/>
        <MudText Typo="Typo.caption">v.@AppMetadata.Version</MudText>
        <MudDivider Vertical="true" Light="true" DividerType="DividerType.Middle" Class="my-3" FlexItem="true"/>
        @if (State.Value.User is AdminUser)
        {
            switch (State.Value.HubStatus)
            {
                case HubConnectionStatus.Disconnected:
                    <MudTooltip Text="Notifications are not available">
                        <MudIconButton Icon="@Icons.Material.Filled.SignalWifiBad" aria-label="Notifications are not available" Color="Color.Error" Disabled="true" Size="Size.Medium"></MudIconButton>
                    </MudTooltip>
                    break;
                case HubConnectionStatus.Connected:
                    <MudTooltip Text="Connected to Notifications Hub">
                        <MudIconButton Icon="@Icons.Material.Filled.SignalWifiStatusbar4Bar" aria-label="Connected to Notifications Hub" Color="Color.Success" Size="Size.Medium"></MudIconButton>
                    </MudTooltip>
                    break;
                case HubConnectionStatus.None:
                default:
                    <MudTooltip Text="Invalid Notification Status">
                        <MudIconButton Icon="@Icons.Material.Filled.SignalWifiStatusbarConnectedNoInternet4" aria-label="Invalid Notification Status" Color="Color.Warning" Size="Size.Medium"></MudIconButton>
                    </MudTooltip>
                    break;
            }
        }

        <RealTimeNotificationsList
            Notifications="@RealtimeNotificationService.Notifications"
            OnMarkAllAsRead="RealtimeNotificationService.SetAllNotificationViewed"
            OnMarkAsRead="RealtimeNotificationService.SetNotificationViewed"
            OnMarkRemoveAll="RealtimeNotificationService.RemoveAll">
        </RealTimeNotificationsList>
        
        <AuthorizeView>
            <Authorized>
                <AuthorizedUserPanel User="@State.Value.User"></AuthorizedUserPanel>
            </Authorized>
            <NotAuthorized>
                <MudBreakpointProvider>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudButton StartIcon="@Icons.Material.Filled.Person" Variant="Variant.Filled" Color="Color.Primary" OnClick="Login">Login</MudButton>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                        <MudTooltip Text="Login">
                            <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Primary" Size="Size.Medium" OnClick="Login"></MudIconButton>
                        </MudTooltip>
                    </MudHidden>
                </MudBreakpointProvider>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent>
        <Loader Items="State.Value.LoadingItems"></Loader>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private readonly CancellationTokenSource _cts = new();

    [CascadingParameter]
    private Task<AuthenticationState?>? AuthenticationState { get; set; }

    [CascadingParameter]
    private Error? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        State.OnStateChange += StateHasChanged;
        State.OnException += OnException;
        State.OnNotification += OnNotification;
        State.OnSelectedSeason += OnSelectedSeason;
        RealtimeNotificationService.NotificationsUpdated += StateHasChanged;

        await RealtimeNotificationService.LoadLocalNotifications();

        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var state = await AuthenticationState;
        if (state?.User.Identity == null || state.User.Identity?.IsAuthenticated is false)
        {
            UserSideEffects.CompleteDefaultProfile(State, new AnonymousUser());
            await RealtimeNotificationService.RemoveAdminNotifications();
        }
        else
        {
            var userId = state.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value ?? string.Empty;
            var isAdmin = state.User.IsInRole(SpaRoleNames.Admin);
            var name = state.User.Identity?.Name ?? string.Empty;
            await UserSideEffects.CompleteUserProfile(State, new UserInformation(userId, name, isAdmin), GetEmailFromUser, _cts.Token);
        }
        await SeasonSideEffects.LoadAvailableSeasons(State, false, _cts.Token);
    }

    private async ValueTask OnSelectedSeason(SimpleSeasonInfo season)
    {
        // If for whatever reason Selected season goes null have, try to stabilize reloading info from server
        if (season is NullSimpleSeasonInfo)
        {
            await SeasonSideEffects.LoadAvailableSeasons(State, true, _cts.Token);
        }
    }

    private void OnNotification(AppNotification obj)
    {
        Snackbar.Add(obj.Message, obj.Severity);
    }

    private async Task<string> GetEmailFromUser()
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var dialog = await DialogService.ShowAsync<UserEmailDialog>("Complete Profile", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            return result.Data.ToString() ?? string.Empty;
        }

        return string.Empty;
    }

    public void Dispose()
    {
        State.OnStateChange -= StateHasChanged;
        State.OnException -= OnException;
        State.OnNotification -= OnNotification;
        State.OnSelectedSeason -= OnSelectedSeason;
        RealtimeNotificationService.NotificationsUpdated -= StateHasChanged;
        _cts.Cancel();
        _cts.Dispose();
    }

    private void OnException(ApplicationException ex)
    {
        Error?.ProcessError(ex.Identifier, ex.Exception);
    }

    private async Task Login()
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        var dialog = await DialogService.ShowAsync<LoginProviderDialog>("Login", options);
        await dialog.Result;
    }

}