@using AnimeFeedManager.WebApp.State
@using AnimeFeedManager.WebApp.Services
@using System.Net
@using AnimeFeedManager.Core.ConstrainedTypes
@using System.Collections.Immutable
@using AnimeFeedManager.Common
@using Toolbelt.Blazor.PWA.Updater
@inherits LayoutComponentBase
@implements IDisposable
@inject ApplicationState State
@inject IUserService UserService
@inject ITvSubscriberService TvSubscriberService
@inject IDialogService DialogService
@inject INotificationService NotificationService
@inject ISnackbar Snackbar


<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<BackendNotifications/>
<PWAUpdater />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudBreakpointProvider>
            <MudHidden Breakpoint="Breakpoint.Xs">
                <MudLink Color="Color.Default" Underline="Underline.Hover" Typo="Typo.h5" Class="ml-3" Href="/">Anime Feed Manager</MudLink>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                <MudLink Href="/" Underline="Underline.None">
                    <MudAvatar Size="Size.Medium" Alt="Anime Feed Manager" Style="font-size: 0.75rem">AMF</MudAvatar>
                </MudLink>
            </MudHidden>
        </MudBreakpointProvider>
        <MudSpacer/>
        <MudDivider Vertical="true" Light="true" DividerType="DividerType.Middle" Class="my-3" FlexItem="true"/>
        <NotificationsPresenter 
            Notifications="@NotificationService.Notifications" 
            OnMarkAllAsRead="NotificationService.SetAllNotificationViewed"
            OnMarkAsRead="NotificationService.SetNotificationViewed"
            OnMarkRemoveAll="NotificationService.RemoveAll"
            ></NotificationsPresenter>
        <AuthorizeView>
            <Authorized>
                <AuthorizedUserPanel User="@State.Value.User"></AuthorizedUserPanel>
            </Authorized>
            <NotAuthorized>
                <MudBreakpointProvider>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudButton StartIcon="@Icons.Material.Filled.Person" Variant="Variant.Filled" Color="Color.Primary" OnClick="Login">Login</MudButton>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                        <MudTooltip Text="Login">
                            <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Primary" Size="Size.Medium" OnClick="Login"></MudIconButton>
                        </MudTooltip>
                    </MudHidden>
                </MudBreakpointProvider>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent>
        <Loader Items="State.Value.LoadingItems"></Loader>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private readonly CancellationTokenSource _cts = new ();
    
    [CascadingParameter]
    private Task<AuthenticationState?>? AuthenticationState { get; set; }

    [CascadingParameter]
    private Error? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await NotificationService.LoadLocalNotifications();
        State.OnStateChange += StateHasChanged;
        NotificationService.NotificationsUpdated += StateHasChanged;
        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var state = await AuthenticationState;
        if (state?.User.Identity == null || state.User.Identity?.IsAuthenticated is false)
        {
            await CompleteDefaultProfile(new AnonymousUser());
            await NotificationService.RemoveAdminNotifications();
        }
        else
        {
            var userId = state.User?.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value ?? string.Empty;
            var isAdmin = state.User?.IsInRole(UserRoles.Admin) ?? false;
            var name = state.User?.Identity?.Name ?? string.Empty;
            var email = await GetUserEmail(userId, name);

            await email.Value.Match(
                em => CompleteProfile(em, isAdmin),
                () => CompleteDefaultProfile(new AuthenticatedUser()));
        }
    }

    private async Task<Email> GetUserEmail(string userId, string username)
    {
        try
        {
            State.AddLoadingItem(userId, "Loading user profile");
            var userEmail = await UserService.GetEmail(userId, _cts.Token);

    // Email is in the systems
            if (!string.IsNullOrEmpty(userEmail))
            {
                State.RemoveLoadingItem(userId);
                return Email.FromString(userEmail);
            }


    // UserName is email
            if (!Email.IsEmail(username))
            {
                State.RemoveLoadingItem(userId);
                return await CompleteUserProfile(userId);
            }

    // Save a new email
            await SaveUser(userId, username);
            State.RemoveInterested(userId);
            State.RemoveLoadingItem(userId);
            return new Email(username);
        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == HttpStatusCode.NotFound)
        {
            State.RemoveInterested(userId);
            State.RemoveLoadingItem(userId);
            return await CompleteUserProfile(userId);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("User Fetching", ex);
            State.RemoveInterested(userId);
            State.RemoveLoadingItem(userId);
            return Email.FromString(string.Empty);
        }
    }

    private async Task<Email> CompleteUserProfile(string userId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<UserEmailDialog>("Complete Profile", options);
        var result = await dialog.Result;

        if (result.Cancelled || result.Data == null) return Email.FromString(string.Empty);
        var email = result.Data.ToString() ?? string.Empty;
        await SaveUser(userId, email);
        return Email.FromString(email);
    }

    private async Task SaveUser(string userId, string email)
    {
        try
        {
            await UserService.MergeUser(new UserDto(userId, email), _cts.Token);
            Snackbar.Add("Email has been stored", Severity.Info);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("User Fetching", ex);
        }
    }

    private Task CompleteDefaultProfile(User user)
    {
        State.SetUser(user);
        State.SetSubscriptions(ImmutableList<string>.Empty);
        State.SetInterested(ImmutableList<string>.Empty);

        return Task.CompletedTask;
    }

    private async Task CompleteProfile(string email, bool isAdmin)
    {
        try
        {
            var subscriptions = await TvSubscriberService.GetSubscriptions(email, _cts.Token);
            State.SetSubscriptions(subscriptions);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            State.SetSubscriptions(ImmutableList<string>.Empty);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("Getting Subscriptions", ex);
        }

        try
        {
            var interested = await TvSubscriberService.GetInterested(email, _cts.Token);
            State.SetInterested(interested);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            State.SetSubscriptions(ImmutableList<string>.Empty);
        }
        catch (Exception ex)
        {
            Error?.ProcessError("Getting Interested Series", ex);
        }

        State.SetUser(isAdmin ? new AdminUser(email) : new ApplicationUser(email));
        Snackbar.Add("Profile has been completed", Severity.Info);
    }

    public void Dispose()
    {
        State.OnStateChange -= StateHasChanged;
        NotificationService.NotificationsUpdated -= StateHasChanged;
        _cts.Cancel();
        _cts.Dispose();
    }

    private async Task Login()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<LoginProviderDialog>("Login", options);
        await dialog.Result;
    }

}