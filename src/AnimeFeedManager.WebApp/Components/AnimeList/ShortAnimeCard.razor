@using AnimeFeedManager.WebApp.State

@inject ApplicationState State

@implements IDisposable
<MudCard>
    <MudCardMedia Image="@Anime.ImageUrl" Height="250" Title="@Anime.Title"/>
    <div>
        <MudCardContent>
            @if (Anime.AirDate is not null)
            {
                <MudText Typo="Typo.caption" Color="Color.Info">@Anime.AirDate.Value.ToLongDateString()</MudText>
            }
            <MudText Typo="Typo.h2">@Anime.Title</MudText>

            @if (!string.IsNullOrEmpty(@Anime.Synopsis))
            {
                <MudText Typo="Typo.body2">@Anime.Synopsis</MudText>
            }
            else
            {
                <MudText Typo="Typo.body2" Color="Color.Warning">Synopsis Not Available</MudText>
            }
        </MudCardContent>

    </div>
    <MudCardActions Class="d-flex">
        @if (State.Value.User is not AnonymousUser)
        {
            switch (Type)
            {
                case SeriesType.Ova:
                    <OvasActions Anime="Anime"/>
                    break;
                case SeriesType.Movie:
                    <MoviesActions Anime="Anime"/>
                    break;
                case SeriesType.Tv:
                case SeriesType.None:
                default:
                    break;
            }
        }
    </MudCardActions>
</MudCard>

@code {

    [CascadingParameter]
    private Error? Error { get; set; }

    [Parameter]
    public SimpleAnime Anime { get; set; } = new(
        string.Empty,
        string.Empty,
        string.Empty,
        string.Empty,
        string.Empty,
        null);

    [Parameter]
    public SeriesType Type { get; set; } = SeriesType.None;

    protected override void OnInitialized()
    {
        State.OnStateChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnStateChange -= StateHasChanged;
    }

}