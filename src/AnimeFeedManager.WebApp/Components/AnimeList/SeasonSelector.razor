@using System.Collections.Immutable

@if (SelectedSeason is not (null or NullSeasonInfo))
{
    <MudStack Row="true" Spacing="5">

        <MudTooltip Text="@PreviousSeasonLabel">
            <MudIconButton Color="Color.Primary"
                           Icon="@Icons.Material.Filled.ArrowBackIosNew"
                           Disabled="@(SelectedIndex == CollectionLength || CollectionLength == 0)"
                           OnClick="Forward">
            </MudIconButton>
        </MudTooltip>


        <MudText Typo="Typo.h4">
            @SelectedSeason.Season.ToUpper() <MudText Typo="Typo.caption">@SelectedSeason.Year</MudText>
        </MudText>

        <MudTooltip Text="@NextSeasonLabel">
            <MudIconButton Color="Color.Primary"
                           Icon="@Icons.Material.Filled.ArrowForwardIos"
                           Disabled="@(SelectedIndex == 0 || CollectionLength == 0)"
                           OnClick="Backwards">
            </MudIconButton>
        </MudTooltip>

    </MudStack>
}
else
{
    <div class="d-flex justify-center">
        <MudChip Icon="@Icons.Material.Filled.Warning" Label="true" Color="Color.Warning">No Season Data Available</MudChip>
    </div>
}


@code {

    private ImmutableList<SeasonInfoDto> _availableSeasons = ImmutableList<SeasonInfoDto>.Empty;


    [Parameter]
    public ImmutableList<SeasonInfoDto> AvailableSeasons
    {
        get => _availableSeasons;
        set
        {
            if (value.Count <= 0) return;
            CollectionLength = (ushort)(value.Count - 1);
            _availableSeasons = value;
            SelectedSeason = value[0];
        }
    }

    [Parameter]
    public SeasonInfoDto SelectedSeason { get; set; } = new NullSeasonInfo();

    [Parameter]
    public EventCallback<SeasonInfoDto> SelectedSeasonChanged { get; set; }

    private string PreviousSeasonLabel
    {
        get
        {
            var season = SelectedIndex != CollectionLength ? AvailableSeasons[SelectedIndex + 1] : null;
            return SeasonText(season);
        }
    }

    private string NextSeasonLabel
    {
        get
        {
            var season = SelectedIndex != 0 ? AvailableSeasons[SelectedIndex - 1] : null;
            return SeasonText(season);
        }
    }

    private ushort _selectedIndex;

    private ushort SelectedIndex
    {
        get => _selectedIndex;
        set
        {
            SelectedSeason = AvailableSeasons[value];
            _selectedIndex = value;
        }
    }

    private ushort CollectionLength { get; set; } = 0;

    private async Task OnSelectionChanged(SeasonInfoDto selectedYear)
    {
        await SelectedSeasonChanged.InvokeAsync(selectedYear);
    }

    private async Task Backwards()
    {
        SelectedIndex--;
        await NotifyValueUpdate();
    }

    private async Task Forward()
    {
        SelectedIndex++;
        await NotifyValueUpdate();
    }

    private async Task NotifyValueUpdate()
    {
        if (SelectedSeason is not NullSeasonInfo)
            await OnSelectionChanged(SelectedSeason);
    }

    private string SeasonText(SeasonInfoDto? seasonInfo) => seasonInfo is not null ? $"{seasonInfo.Season.ToUpper()} {seasonInfo.Year}" : "Not Available";

}