@using AnimeFeedManager.WebApp.State
@inject ApplicationState State

<MudChipSet @bind-SelectedChips="SelectedFilters" MultiSelection="true" Filter="true" Class="d-flex justify-center mb-4">
    <MudChip Color="Color.Info" Text="Available"></MudChip>
    <MudChip Color="Color.Info" Text="Not Available"></MudChip>
    <MudChip Color="Color.Info" Text="Completed"></MudChip>
    @if (State.Value.User is ApplicationUser)
    {
        <MudChip Color="Color.Info" Text="Subscribed"></MudChip>
        <MudChip Color="Color.Info" Text="Interested"></MudChip>
    }
</MudChipSet>


@code {

    [Parameter]
    public EventCallback<IEnumerable<Func<FeedAnime, bool>>> SelectedFiltersChanged { get; set; }

    IReadOnlyCollection<string> SelectedFilters
    {
        get => _selectedFilters;
        set
        {
            NotifyChanges(value).GetAwaiter().GetResult();
            _selectedFilters = value;
        }
    }

    private IReadOnlyCollection<string> _selectedFilters = [];

    private async Task NotifyChanges(IReadOnlyCollection<string> selectedChips)
    {
        await SelectedFiltersChanged.InvokeAsync(selectedChips.Select(Map));
    }

    private Func<FeedAnime, bool> Map(string chip)
    {
        return chip switch {
            "Available" => Filters.Available,
            "Not Available" => Filters.NoAvailable,
            "Completed" => Filters.Completed,
            "Subscribed" => Filters.Subscribed(State.Value.TvSubscriptions),
            "Interested" => Filters.Interested(State.Value.TvInterested),
            _ => throw new ArgumentException($"'{chip}' is an invalid selection")
            };
    }

}