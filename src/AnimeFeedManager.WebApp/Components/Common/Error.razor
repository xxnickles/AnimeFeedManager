@using System.Collections.Immutable
@using System.Net
@using System.Text
@using System.Text.Json
@using AnimeFeedManager.WebApp.Exceptions
@inject ISnackbar Snackbar
@inject ILogger<Error> Logger
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public void ProcessError(string context, Exception ex)
    {
        switch (ex)
        {
            case HttpRequestException he:
                Snackbar.Add($"{context}: {ParseMessage(he)}", Severity.Error);
                return;
            case JsonException:
                Snackbar.Add($"{context}: Couldn't connect to remote server", Severity.Error);
                return;
            default:
                Snackbar.Add($"{context}: An error has occurred {ex.Message}", Severity.Error);
                break;
        }

        Logger.LogError(ex, "An error has ocurred");
    }

    private string ParseMessage(HttpRequestException exception)
    {
        return exception switch {
            HttpProblemDetailsValidationException ex => $"{ex.Message}{Environment.NewLine}{Environment.NewLine}Please verify the following messages:{Environment.NewLine}{ParseErrors(ex.Errors)}",
            HttpProblemDetailsException ex => $"{ex.Message}:{Environment.NewLine}{ex.Detail}",
            _ => ParseDefaultMessage(exception)
            };
    }

    private string ParseErrors(ImmutableDictionary<string, string[]> errors)
    {
        var builder = new StringBuilder();
        foreach (var error in errors)
        {
            builder.AppendLine($"[{error.Key}]: {string.Join(". ", error.Value)}");
        }
        return builder.ToString();
    }

    private string ParseDefaultMessage(HttpRequestException exception) => exception.StatusCode switch
    {
        HttpStatusCode.NotFound => "Resource has not been found",
        HttpStatusCode.InternalServerError => "An error occurred in the server while trying to process the request",
        HttpStatusCode.Unauthorized => "You Need to be authenticated to access",
        HttpStatusCode.Forbidden => "You don't have access here",
        HttpStatusCode.UnprocessableEntity => "Validations errors ocurred",
        _ => "Couldn't connect to remote server"
        };


}