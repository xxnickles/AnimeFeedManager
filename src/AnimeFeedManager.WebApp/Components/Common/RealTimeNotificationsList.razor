@using AnimeFeedManager.WebApp.Services
@using System.Collections.Immutable

<MudBadge Dot="true" Overlap="true" Color="Color.Secondary" Visible="_unreadNotifications > 0">
    <MudMenu Icon="@Icons.Material.Filled.Notifications" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
        @if (Notifications.Any())
        {
            @foreach (var notification in Notifications)
            {
                <MudMenuItem Class="px-2 py-0 rounded" OnClick="@(() => OnMarkAsRead.InvokeAsync(notification.Id))" OnTouch="@(() => OnMarkAsRead.InvokeAsync(notification.Id))">

                    <MudText Typo="Typo.subtitle2" Color="@GetColor(notification.Type)">
                        @if (!notification.Read)
                        {
                            <MudIcon Style="font-size: 0.7rem; margin-right: 0.5rem;" Icon="@Icons.Material.Filled.Circle" Color="@GetColor(notification.Type)" Title="Unread"/>
                        }
                        @GetTitle(notification.Source)
                    </MudText>

                    <MudText Typo="Typo.body2">@notification.Message</MudText>
                </MudMenuItem>
                <MudDivider Class="my-2"/>
            }
            @if (_totalNotifications > 0)
            {
                <MudButton Class="pl-3" Size="Size.Small" Variant="Variant.Text" DisableElevation="true" Color="Color.Primary" OnClick="@(() => OnMarkAllAsRead.InvokeAsync())">Mark all as read</MudButton>
                <MudButton Class="pl-3" Size="Size.Small" Variant="Variant.Text" DisableElevation="true" Color="Color.Error" OnClick="@(() => OnMarkRemoveAll.InvokeAsync())">Remove All</MudButton>
            }
        }
        else
        {
            <MudMenuItem>
                <MudText Typo="Typo.body1">No notifications to show</MudText>
            </MudMenuItem>
        }
    </MudMenu>
</MudBadge>

@code {

    private int _unreadNotifications;
    private int _totalNotifications;
    private ImmutableList<ServerNotification> _notifications = ImmutableList<ServerNotification>.Empty;

    [Parameter]
    public ImmutableList<ServerNotification> Notifications
    {
        get => _notifications;
        set
        {
            _notifications = value.OrderByDescending(n => n.Time).ToImmutableList();
            _unreadNotifications = value.Count(x => !x.Read);
            _totalNotifications = value.Count;
        }
    }

    [Parameter]
    public EventCallback OnMarkAllAsRead { get; set; }

    [Parameter]
    public EventCallback OnMarkRemoveAll { get; set; }

    [Parameter]
    public EventCallback<string> OnMarkAsRead { get; set; }

    private string GetTitle(NotificationSource source) => source switch
    {
        NotificationSource.Tv => "TV Season Library",
        NotificationSource.Movies => "Movies Season Library",
        NotificationSource.Ovas => "Ovas Season Library",
        NotificationSource.Titles => "Feed Titles",
        NotificationSource.None => "Information",
        _ => "Information"
        };

    private Color GetColor(NotificationType type) => type switch{
        
        NotificationType.Information => Color.Info,
        NotificationType.Update => Color.Success,
        NotificationType.Error => Color.Error,
        _ => Color.Default
        };


}