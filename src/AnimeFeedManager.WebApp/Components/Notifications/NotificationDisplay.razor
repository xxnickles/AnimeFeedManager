@using AnimeFeedManager.Common.Notifications

@if (Notifications.Length > 0)
{
    <MudTable Items="Notifications.OrderByDescending(x => x.TimeOffset)" Style="width: 100%">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Notification for @For.Value</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 1.5rem">Type</MudTh>
            <MudTh Style="width: 7.3rem">Date</MudTh>
            <MudTh>Notification</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Type">
                <MudIcon Icon="@GetIcon(context.Type)" Color="Color.Secondary"/>
            </MudTd>
            <MudTd DataLabel="Date">@context.TimeOffset.ToString("MMM d, yyyy")</MudTd>
            <MudTd DataLabel="Notification">
                <NotificationBody Notification="new NotificationBodyPayload(context, For)"></NotificationBody>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}
else
{
    <MudAlert Severity="Severity.Warning" Style="width: 100%">There no notifications available</MudAlert>
}


@code {

    [Parameter]
    public UiNotification[] Notifications { get; set; } = Array.Empty<UiNotification>();

    [Parameter]
    public NotificationFor For { get; set; } = NotificationFor.None;


    private string GetIcon(string type)
    {
        var parsed = NotificationType.Parse(type);
        if (parsed == NotificationType.Feed)
            return Icons.Material.Filled.RssFeed;
        if (parsed == NotificationType.Error)
            return Icons.Material.Filled.Error;

        return parsed == NotificationType.Update ? Icons.Material.Filled.SystemUpdate : Icons.Material.Filled.Warning;
    }

}