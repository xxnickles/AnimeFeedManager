@page "/admin"
@using Microsoft.AspNetCore.Authorization
@using AnimeFeedManager.WebApp.Services
@inject IAdminService AdminService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

@attribute [Authorize(Roles = "admin")]

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper>
        <MudSimpleTable>
            <tbody>
            <tr>
                <td>
                    <MudText Typo="Typo.body1">Automated Update Latest library</MudText>
                    <MudText Typo="Typo.subtitle2">Process in the background feed titles, series, animes</MudText>
                </td>
                <td style="text-align: right">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Secondary"
                               OnClick="ProcessLibrary">
                        Update
                    </MudButton>
                </td>
            </tr>

            <tr>
                <td>
                    <MudText Typo="Typo.body1">Automated Update Latest feed titles</MudText>
                    <MudText Typo="Typo.subtitle2">Process in the background feed titles only</MudText>
                </td>
                <td style="text-align: right">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Secondary"
                               OnClick="ProcessFeedTitles">
                        Update
                    </MudButton>
                </td>
            </tr>

            <tr>
                <td>
                    <MudText Typo="Typo.body1">Set default state to all</MudText>
                    <MudText Typo="Typo.subtitle2">Set all series completed status to false</MudText>
                </td>
                <td style="text-align: right">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Secondary"
                               OnClick="SetCompletedStatus">
                        Set
                    </MudButton>
                </td>
            </tr>
            </tbody>
        </MudSimpleTable>
    </MudPaper>
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    [CascadingParameter]
    private Error? Error { get; set; }

    private async Task ProcessLibrary()
    {
        try
        {
            if (await GetConfirmation("Process Latest Season Library", "Do you want to update latest season library? This task will run in the background"))
            {
                await AdminService.UpdateTvLibrary(_cts.Token);
                Snackbar.Add("Latest season library would be updated in the background", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Error?.ProcessError("Updating Library", ex);
        }
    }
    
    private async Task ProcessFeedTitles()
    {
        try
        {
            if (await GetConfirmation("Process Latest Feed Titles", "Do you want to update latest feed titles? This task will run in the background"))
            {
                await AdminService.UpdateTvTitles(_cts.Token);
                Snackbar.Add("Latest feed titles would be updated in the background", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Error?.ProcessError("Updating Feed Titles", ex);
        }
    }

    private async Task SetCompletedStatus()
    {
        try
        {
            if (await GetConfirmation("Set Completed Status", "Do you want to set completed the library to completed status false?"))
            {
                await AdminService.SetAllSeriesAsNoCompleted(_cts.Token);
                Snackbar.Add("Series status is being updated in the background", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Error?.ProcessError("Setting Series Status", ex);
        }
    }


    private async Task<bool> GetConfirmation(string title, string message)
    {
        var parameters = new DialogParameters { { nameof(ConfirmationDialog.Message), message } };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ConfirmationDialog>(title, parameters, options);
        var result = await dialog.Result;
        if (result.Cancelled || result.Data == null) return false;
        return (bool)result.Data;
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}