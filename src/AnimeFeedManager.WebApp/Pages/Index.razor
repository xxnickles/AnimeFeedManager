@page "/"
@page "/{Year:int}/{Season}"
@using AnimeFeedManager.WebApp.Services.Movies
@using AnimeFeedManager.WebApp.Services.Ovas
@using AnimeFeedManager.WebApp.Services.Tv
@using AnimeFeedManager.WebApp.State
@implements IDisposable
@inject ITvCollectionFetcher TvCollectionFetcher
@inject IOvasCollectionService OvasCollectionService
@inject IMoviesCollectionService MoviesCollectionService
@inject ApplicationState State
@inject NavigationManager NavigationManager

<PageTitle>AFM - @GetTitle(State.Value.SelectedSeason)</PageTitle>
<SeasonSelector AvailableSeasons="@State.Value.AvailableSeasons" SelectedSeason="@State.Value.SelectedSeason" SelectedSeasonChanged="OnSeasonChanged"></SeasonSelector>

@if (State.Value.SelectedSection == SeriesType.Tv)
{
    <FilterSelector SelectedFiltersChanged="OnFilterSelectionChanges"></FilterSelector>
}

<MudTabs Elevation="1" Rounded="true" Position="Position.Top" Border="false" PanelClass="mt-3" Color="Color.Transparent" ActivePanelIndexChanged="index => State.SetState(State.Value with{ SelectedSection = (SeriesType) index})">
    <MudTabPanel Text="TV">
        <SeriesGrid Collection="@_filteredCollection"></SeriesGrid>
    </MudTabPanel>
    <MudTabPanel Text="Ovas">
        <ShortSeriesGrid Collection="@_ovasCollection" Type="SeriesType.Ova"></ShortSeriesGrid>
    </MudTabPanel>
    <MudTabPanel Text="Movies">
        <ShortSeriesGrid Collection="@_moviesCollection" Type="SeriesType.Movie"></ShortSeriesGrid>
    </MudTabPanel>
</MudTabs>


@code {
    private readonly CancellationTokenSource _cts = new();
    private SeasonCollection _collection = new EmptySeasonCollection();
    private ShortSeasonCollection _ovasCollection = new EmptyShortSeasonCollection();
    private ShortSeasonCollection _moviesCollection = new EmptyShortSeasonCollection();
    private SeasonCollection _filteredCollection = new EmptySeasonCollection();

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public string Season { get; set; } = string.Empty;

    [CascadingParameter]
    private Error? Error { get; set; }

    private IEnumerable<Func<FeedAnime, bool>> _filters = Enumerable.Empty<Func<FeedAnime, bool>>();

    protected override async Task OnInitializedAsync()
    {
        State.OnStateChange += StateHasChanged;
        State.OnSelectedSeason += OnSelectedSeason;
        if (State.Value.SelectedSeason is not NullSimpleSeasonInfo)
        {
            await OnSelectedSeason(State.Value.SelectedSeason);
        }
    }

    private async ValueTask OnSelectedSeason(SimpleSeasonInfo season)
    {
        const string key = "lo_series";
        State.AddLoadingItem(key, "Loading Series");
        await GetTvCollection(season);
        await GetOvasCollection(season);
        await GetMoviesCollection(season);
        State.RemoveLoadingItem(key);
    }

    private async Task GetTvCollection(SimpleSeasonInfo season)
    {
        try
        {
            _collection = await TvCollectionFetcher.GetSeasonLibrary(season, _cts.Token);
            _filteredCollection = FilterCollection(_collection, _filters);
        }
        catch (Exception e)
        {
            Error?.ProcessError("TV Collection Fetching", e);
        }
    }

    private async Task GetOvasCollection(SimpleSeasonInfo season)
    {
        try
        {
            _ovasCollection = await OvasCollectionService.GetSeasonLibrary(season, _cts.Token);
        }
        catch (Exception e)
        {
            Error?.ProcessError("Ovas Collection Fetching", e);
        }
    }

    private async Task GetMoviesCollection(SimpleSeasonInfo season)
    {
        try
        {
            _moviesCollection = await MoviesCollectionService.GetSeasonLibrary(season, _cts.Token);
        }
        catch (Exception e)
        {
            Error?.ProcessError("Movies Collection Fetching", e);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
    // TODO: refactor to use updated season type
        var result = DtoFactories.TryToParse(Season, Year, false, out var season);
        if (result)
        {
            await State.SetSelectedSeason(season);
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private static string GetTitle(SimpleSeasonInfo season) =>
        season is not NullSimpleSeasonInfo ? $"{season.Year} - {season.Season.ToUpper()}" : "No Data Available";


    public void Dispose()
    {
        State.OnStateChange -= StateHasChanged;
        State.OnSelectedSeason -= OnSelectedSeason;
        _cts.Cancel();
        _cts.Dispose();
    }

    private void OnSeasonChanged(SimpleSeasonInfo season)
    {
        NavigationManager.NavigateTo($"/{season.Year}/{season.Season}");
    }

    private void OnFilterSelectionChanges(IEnumerable<Func<FeedAnime, bool>> filters)
    {
        _filters = filters;
        _filteredCollection = FilterCollection(_collection, filters);
    }

    private static SeasonCollection FilterCollection(SeasonCollection collectionBase, IEnumerable<Func<FeedAnime, bool>> filters)
    {
        return new SeasonCollection(
            collectionBase.Year,
            collectionBase.Season,
            collectionBase.Animes.Filter(filters).ToArray());
    }

}