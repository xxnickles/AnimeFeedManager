@page "/{Season}/tv"

@using AnimeFeedManager.Features.Tv.Library
@inject TvLibraryGetter LibraryGetter;
@inject IUserProvider UserProvider;
@inject ILogger<TvGrid> Logger;
@* @attribute [StreamRendering(true)] *@

<PageTitle>@PageTitleForSeason(SeriesType.Tv, _selectedSeason)</PageTitle>

<SeriesGrid Series="_animes" SeriesType="SeriesType.Tv" CurrentSeason="_selectedSeason"></SeriesGrid>


@code {

    [CascadingParameter] public HttpContext context { get; set; } = default!;

    [Parameter] public string Season { get; set; } = string.Empty;

    private SeasonInformation _selectedSeason = new DefaultSeasonInformation();

    private BaseAnime[] _animes = [];

    protected override async Task OnInitializedAsync()
    {
        _selectedSeason = SeasonValidators.Parse(Season)
            .Match(
                values => new SeasonInformation(values.season, values.year),
                _ => new DefaultSeasonInformation()
            );
        var user = await UserProvider.GetCurrentUser(default);
        var results = await LibraryGetter.GetForSeason(_selectedSeason.Season, _selectedSeason.Year)
            .MapAsync(lib => MapForUser(lib, user))
            .LogErrors(Logger);

        _animes = results.Match(
            collection => collection,
            _ => []
        );
    }

    private BaseAnime[] MapForUser(SeasonCollection seasonCollection, AppUser user)
    {
        return user switch
        {
            AuthenticatedUser u => seasonCollection.Animes.Select(a => MapForAuthenticatedUser(a, u)).ToArray(),
            _ => seasonCollection.Animes.ToArray<BaseAnime>()
        };
    }

    private BaseAnime MapForAuthenticatedUser(FeedAnime anime, AuthenticatedUser user)
    {
        return anime.FeedInformation.Status switch
        {
            SeriesStatus.NotAvailableValue => user.TvSubscriptions.Insterested.Select(x => x.ToString()).Contains(anime.Title)
                ? new InterestedAnime(anime.Id, anime.Title, anime.Synopsis, anime.Url, anime.Title, user.UserId)
                : new NotAvailableAnime(anime.Id, anime.Title, anime.Synopsis, anime.Url, anime.Title, user.UserId),
            SeriesStatus.CompletedValue => new CompletedAnime(anime.Id, anime.Title, anime.Synopsis, anime.Url),
            SeriesStatus.OngoingValue => user.TvSubscriptions.Subscriptions.Select(x => x.ToString()).Contains(anime.FeedInformation.Title ?? string.Empty)
                ? new SubscribedAnime(anime.Id, anime.Title, anime.Synopsis, anime.Url, anime.FeedInformation.Title ?? string.Empty, user.UserId)
                : new UnSubscribedAnime(anime.Id, anime.Title, anime.Synopsis, anime.Url, anime.FeedInformation.Title ?? string.Empty, user.UserId),
            _ => anime
        };
    }

}

