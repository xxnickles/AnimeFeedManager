@inherits AvailableSeriesBase

@if (ControlData is not null)
{
    <WithMessage Message="@Message" DomainError="@DomainError">
        <Content>
            <GridFilterMetadataHolder Filters="@GetFilters()"/>
            <form hx-post="tv/unsubscribe"
                  hx-swap="outerHTML"
                  hx-indicator="@ControlData.LoaderSelector"
                  hx-confirm="@($"Do you want to unsubscribe to {ControlData.Title}?")">
                <AntiforgeryToken/>
                <fieldset class="flex flex-nowrap items-center justify-between">
                    <div class="tooltip tooltip-accent" data-tip="Subscribed">
                        <div class="badge badge-accent"></div>
                    </div>
                    <div>
                        <input type="hidden" name="@nameof(AvailableTvSeriesControlData.Title)" @bind="ControlData.Title"/>
                        <input type="hidden" name="@nameof(AvailableTvSeriesControlData.FeedId)" @bind="ControlData.FeedId"/>
                        <input type="hidden" name="@nameof(AvailableTvSeriesControlData.UserId)" @bind="ControlData.UserId"/>
                        <input type="hidden" name="@nameof(AvailableTvSeriesControlData.LoaderSelector)" @bind="ControlData.LoaderSelector"/>
                        <button type="submit" class="btn btn-secondary btn-xs">Unsubscribe</button>
                    </div>
                </fieldset>
            </form>
        </Content>
    </WithMessage>
}

@code{

    private IReadOnlyDictionary<string, object> GetFilters() => new Dictionary<string, object>([Attributes.Available, Attributes.Subscribed]).AsReadOnly();

}