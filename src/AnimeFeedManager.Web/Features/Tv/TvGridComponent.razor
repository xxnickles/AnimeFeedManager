@using AnimeFeedManager.Features.Tv.Library
@inject TvLibraryGetter LibraryGetter;
@inject ILogger<TvGridComponent> Logger;
@inject IUserProvider UserProvider;

<WithMessage Message="@Message" DomainError="@DomainError" >
    <Content>
        <SeriesGrid Series="_animes"></SeriesGrid>
    </Content>
</WithMessage>


@code {
    [Parameter, EditorRequired] public SeasonInformation SeasonInfo { get; set; } = new DefaultSeasonInformation();
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public DomainError? DomainError { get; set; }
    private BaseAnime[] _animes = [];


    protected override async Task OnInitializedAsync()
    {
        var user = await UserProvider.GetCurrentUser(default);

        var results = await LibraryGetter.GetForSeason(SeasonInfo.Season, SeasonInfo.Year)
            .MapAsync(lib => MapForUser(lib, user))
            .LogErrors(Logger);

        _animes = results.Match(
            collection => collection,
            _ => []
        );
    }

    private BaseAnime[] MapForUser(SeasonCollection seasonCollection, AppUser user)
    {
        return user switch
        {
            AuthenticatedUser u => seasonCollection.Animes.Select(a => MapForAuthenticatedUser(a, u)).ToArray(),
            _ => seasonCollection.Animes.ToArray<BaseAnime>()
        };
    }

    private BaseAnime MapForAuthenticatedUser(FeedAnime anime, AuthenticatedUser user)
    {
        return anime.FeedInformation.Status switch
        {
            SeriesStatus.NotAvailableValue => user.TvSubscriptions.Insterested.Select(x => x.ToString()).Contains(anime.Title)
                ? new InterestedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, user.UserId, user is AdminUser)
                : new NotAvailableAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, user.UserId, user is AdminUser),
            SeriesStatus.CompletedValue => new CompletedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl),
            SeriesStatus.OngoingValue => user.TvSubscriptions.Subscriptions.Select(x => x.ToString()).Contains(anime.FeedInformation.Title ?? string.Empty)
                ? new SubscribedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.FeedInformation.Title ?? string.Empty, user.UserId, user is AdminUser)
                : new UnSubscribedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.FeedInformation.Title ?? string.Empty, user.UserId, user is AdminUser),
            _ => anime
        };
    }

}