@using System.Collections.Immutable
@using AnimeFeedManager.Features.Ovas.Library
@using AnimeFeedManager.Features.Ovas.Library.Types
@inject ILogger<OvasGridComponent> Logger;
@inject OvasLibraryGetter LibraryGetter;
@inject IUserProvider UserProvider;

<WithMessage Message="@Message" DomainError="@DomainError">
    <Content>
        <GridSection>
            <GridContent>
                @foreach (var item in _ovas)
                {
                    <OvaCard Ova="item"></OvaCard>
                }
            </GridContent>
        </GridSection>
    </Content>
</WithMessage>

@code {
    [Parameter, EditorRequired] public SeasonInformation SeasonInfo { get; set; } = new DefaultSeasonInformation();
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public DomainError? DomainError { get; set; }
    private BaseOva[] _ovas = [];

    protected override async Task OnInitializedAsync()
    {
        var user = await UserProvider.GetCurrentUser(default);

        var results = await LibraryGetter.GetFeedForSeason(SeasonInfo.Season, SeasonInfo.Year)
            .MapAsync(lib => Map(lib, user))
            .LogErrors(Logger);

        _ovas = results.Match(
            collection => collection,
            _ => []
        );
    }

    private BaseOva[] Map(ImmutableList<OvaLibrary> seasonCollection, AppUser user)
    {
        return user switch
        {
            AuthenticatedUser u => seasonCollection.Select(a => MapForAuthenticatedUser(a, u)).ToArray(),
            _ => seasonCollection.Select(MapForAnonymous).ToArray()
        };
    }

    private BaseOva MapForAnonymous(OvaLibrary anime)
    {
        return anime.AirDate switch
        {
            not null => new AvailableOva(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.AirDate ?? default, anime.Links),
            _ => new NotAvailableOva(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl)
        };
    }

    private BaseOva MapForAuthenticatedUser(OvaLibrary anime, AuthenticatedUser user)
    {
        return anime.AirDate switch
        {
            not null => user.OvaSubscriptions.Subscriptions.Contains(anime.Title)
                ? new SubscribedOva(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.AirDate ?? default, user.UserId, user is AdminUser, anime.Links)
                : new UnsubscribedOva(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.AirDate ?? default, user.UserId, user is AdminUser, anime.Links),
            _ => new NotAvailableOva(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl)
        };
    }

}